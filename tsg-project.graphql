schema {
  query: Root
  mutation: Mutations
}

"""
Content Type for a company that sells cheeses; i.e. Cheese Shops, Farmers Markets etc.
"""
type Agents implements TSSearchable {
  descriptionSummary: String
  address: AgentsAddress
  operators: String

  """Enter the website URL."""
  websiteUrl: String
  phone: String
  name: String!
  logo(locale: String, enableLocaleFallback: Boolean = true): Asset

  """Enter the type of vendor."""
  type: [String]
  yearFounded: Int

  """Enter any social media links available for this agent."""
  socialMedia: AgentsSocialMedia
  email: String
  _id: ID
  _version: Int
  _contentTypeId: String
  _contentTypeName: String
  _createdAt: String
  _updatedAt: String
  _enabled: Boolean
  _enabledAt: String
  _references(filter: JSON, sort: [TSSearchSort], from: Int, size: Int, locale: String, enableLocaleFallback: Boolean = true): UndefinedReferencePaginatedList
  relatedCheese(filter: JSON, sort: [TSSearchSort], from: Int, size: Int, locale: String, enableLocaleFallback: Boolean = true): CheesePaginatedList
  searchSummary: String
}

type AgentsAddress {
  addressLine1: String
  zipCode: String
  country: String!
  addressLine2: String
  state: String
  city: String
}

input AgentsAddressInput {
  addressLine1: String
  zipCode: String
  country: String
  addressLine2: String
  state: String
  city: String
}

type AgentsPaginatedList {
  results: [Agents] @deprecated(reason: "Use items instead")
  items: [Agents]
  total: Int
}

"""A Agents search result"""
type AgentsSearchResult {
  searchSummary: String
  _updatedAt: String
  _createdAt: String
  _enabledAt: String
  _enabled: Boolean
  descriptionSummary: String
  operators: String
  websiteUrl: String
  phone: String
  name: String
  yearFounded: Int
  email: String
  _id: String
  _version: Int
  _contentTypeId: String
  _contentTypeName: String
}

"""Agents search results"""
type AgentsSearchResults {
  results: [AgentsSearchResult]
  total: Int
}

"""Enter any social media links available for this agent."""
type AgentsSocialMedia {
  twitter: String
  instagram: String
  facebook: String
  youTube: String
}

"""Enter any social media links available for this agent."""
input AgentsSocialMediaInput {
  twitter: String
  instagram: String
  facebook: String
  youTube: String
}

"""The built-in TakeShape asset model"""
type Asset implements TSSearchable {
  title: String
  description: String
  filename: String!
  caption: JSON
  captionHtml(
    imageConfig: JSON
    images: TSImagesConfig

    """A prefix to be all CSS classes in the generated HTML"""
    classPrefix: String = ""
  ): String
  credit: JSON
  creditHtml(
    imageConfig: JSON
    images: TSImagesConfig

    """A prefix to be all CSS classes in the generated HTML"""
    classPrefix: String = ""
  ): String
  path: String!
  s3Key: String @deprecated(reason: "Use path instead")
  mimeType: String
  sourceUrl: String
  uploadStatus: String
  _id: ID
  _version: Int
  _contentTypeId: String
  _contentTypeName: String
  _createdAt: String
  _updatedAt: String
  _enabled: Boolean
  _enabledAt: String
  _references(filter: JSON, sort: [TSSearchSort], from: Int, size: Int, locale: String, enableLocaleFallback: Boolean = true): UndefinedReferencePaginatedList
  agentsSet(filter: JSON, sort: [TSSearchSort], from: Int, size: Int, locale: String, enableLocaleFallback: Boolean = true): AgentsPaginatedList
  cheeseSet(filter: JSON, sort: [TSSearchSort], from: Int, size: Int, locale: String, enableLocaleFallback: Boolean = true): CheesePaginatedList
  searchSummary: String
}

type AssetPaginatedList {
  results: [Asset] @deprecated(reason: "Use items instead")
  items: [Asset]
  total: Int
}

"""A Asset search result"""
type AssetSearchResult {
  searchSummary: String
  _updatedAt: String
  _createdAt: String
  _enabledAt: String
  _enabled: Boolean
  title: String
  description: String
  filename: String
  path: String
  s3Key: String
  mimeType: String
  sourceUrl: String
  uploadStatus: String
  _id: String
  _version: Int
  _contentTypeId: String
  _contentTypeName: String
}

"""Asset search results"""
type AssetSearchResults {
  results: [AssetSearchResult]
  total: Int
}

"""The built-in TakeShape asset model"""
type BaseAsset implements TSSearchable {
  title: String
  description: String
  filename: String!
  caption: JSON
  captionHtml(
    imageConfig: JSON
    images: TSImagesConfig

    """A prefix to be all CSS classes in the generated HTML"""
    classPrefix: String = ""
  ): String
  credit: JSON
  creditHtml(
    imageConfig: JSON
    images: TSImagesConfig

    """A prefix to be all CSS classes in the generated HTML"""
    classPrefix: String = ""
  ): String
  path: String!
  s3Key: String @deprecated(reason: "Use path instead")
  mimeType: String
  sourceUrl: String
  uploadStatus: String
  _id: ID
  _version: Int
  _contentTypeId: String
  _contentTypeName: String
  _createdAt: String
  _updatedAt: String
  _enabled: Boolean
  _enabledAt: String
  searchSummary: String
}

"""This is a soft goat cheese is an amazing bite and smooth finish."""
type Cheese implements TSSearchable {
  characteristics: CheeseCharacteristics
  tastesLike(locale: String, enableLocaleFallback: Boolean = true): [Cheese]
  name: String!
  description: String
  labelOrPhoto(locale: String, enableLocaleFallback: Boolean = true): Asset
  source: String!
  photos: [CheesePhotos]

  """Enter a short pairing recommendation."""
  pairings: String
  agents(locale: String, enableLocaleFallback: Boolean = true): [Agents]
  _id: ID
  _version: Int
  _contentTypeId: String
  _contentTypeName: String
  _createdAt: String
  _updatedAt: String
  _enabled: Boolean
  _enabledAt: String
  _references(filter: JSON, sort: [TSSearchSort], from: Int, size: Int, locale: String, enableLocaleFallback: Boolean = true): UndefinedReferencePaginatedList
  cheeseSet(filter: JSON, sort: [TSSearchSort], from: Int, size: Int, locale: String, enableLocaleFallback: Boolean = true): CheesePaginatedList
  searchSummary: String
}

type CheeseCharacteristics {
  flavors: String
  covering: [String]!
  texture: [String]!
  aged: String!
  milk: [String]!
  style: String
  rennetType: [String]!
  standardsAndProcessing: [String]
}

input CheeseCharacteristicsInput {
  flavors: String
  covering: [String]
  texture: [String]
  aged: String
  milk: [String]
  style: String
  rennetType: [String]
  standardsAndProcessing: [String]
}

type CheeseHardnesses implements TSSearchable {
  name: String
  _id: ID
  _version: Int
  _contentTypeId: String
  _contentTypeName: String
  _createdAt: String
  _updatedAt: String
  _enabled: Boolean
  _enabledAt: String
  searchSummary: String
}

type CheeseHardnessesPaginatedList {
  results: [CheeseHardnesses] @deprecated(reason: "Use items instead")
  items: [CheeseHardnesses]
  total: Int
}

"""A CheeseHardnesses search result"""
type CheeseHardnessesSearchResult {
  searchSummary: String
  _updatedAt: String
  _createdAt: String
  _enabledAt: String
  _enabled: Boolean
  name: String
  _id: String
  _version: Int
  _contentTypeId: String
  _contentTypeName: String
}

"""CheeseHardnesses search results"""
type CheeseHardnessesSearchResults {
  results: [CheeseHardnessesSearchResult]
  total: Int
}

type CheesePaginatedList {
  results: [Cheese] @deprecated(reason: "Use items instead")
  items: [Cheese]
  total: Int
}

type CheesePhotos {
  photo(locale: String, enableLocaleFallback: Boolean = true): Asset
}

input CheesePhotosInput {
  photo: TSRelationshipInput
}

"""A Cheese search result"""
type CheeseSearchResult {
  searchSummary: String
  _updatedAt: String
  _createdAt: String
  _enabledAt: String
  _enabled: Boolean
  name: String
  description: String
  source: String
  pairings: String
  _id: String
  _version: Int
  _contentTypeId: String
  _contentTypeName: String
}

"""Cheese search results"""
type CheeseSearchResults {
  results: [CheeseSearchResult]
  total: Int
}

"""Describes a structural update to an array of data."""
input ContentStructureInput {
  """A deep path to the array being updated (e.g. a.b[1].c)."""
  path: String!

  """
  An array where the indices represent the to index, and the values represent
  the from index.For example to transform ["a","b","c","d"] into ["c","a"], this
  value would be [2,0].
  """
  structure: [Int]
}

"""create Agents input"""
input CreateAgentsInput {
  descriptionSummary: String
  address: AgentsAddressInput
  operators: String

  """Enter the website URL."""
  websiteUrl: String
  phone: String
  name: String!
  logo: TSRelationshipInput

  """Enter the type of vendor."""
  type: [String]
  yearFounded: Int

  """Enter any social media links available for this agent."""
  socialMedia: AgentsSocialMediaInput
  email: String
  _id: ID
  _version: Int
  _contentTypeId: String
  _createdAt: String
  _updatedAt: String
  _enabled: Boolean
  _enabledAt: String
  clientMutationId: String
}

type CreateAgentsResult {
  clientMutationId: String
  result: Agents
}

"""create Asset input"""
input CreateAssetInput {
  title: String
  description: String
  filename: String!
  caption: JSON
  credit: JSON
  path: String!
  s3Key: String
  mimeType: String
  sourceUrl: String
  uploadStatus: String
  _id: ID
  _version: Int
  _contentTypeId: String
  _createdAt: String
  _updatedAt: String
  _enabled: Boolean
  _enabledAt: String
  clientMutationId: String
}

type CreateAssetResult {
  clientMutationId: String
  result: Asset
}

"""create CheeseHardnesses input"""
input CreateCheeseHardnessesInput {
  name: String
  _id: ID
  _version: Int
  _contentTypeId: String
  _createdAt: String
  _updatedAt: String
  _enabled: Boolean
  _enabledAt: String
  clientMutationId: String
}

type CreateCheeseHardnessesResult {
  clientMutationId: String
  result: CheeseHardnesses
}

"""create Cheese input"""
input CreateCheeseInput {
  characteristics: CheeseCharacteristicsInput
  tastesLike: [TSRelationshipInput]
  name: String!
  description: String
  labelOrPhoto: TSRelationshipInput
  source: String!
  photos: [CheesePhotosInput]

  """Enter a short pairing recommendation."""
  pairings: String
  agents: [TSRelationshipInput]
  _id: ID
  _version: Int
  _contentTypeId: String
  _createdAt: String
  _updatedAt: String
  _enabled: Boolean
  _enabledAt: String
  clientMutationId: String
}

type CreateCheeseResult {
  clientMutationId: String
  result: Cheese
}

"""create Favorites input"""
input CreateFavoritesInput {
  rating: String
  location: String
  _id: ID
  _version: Int
  _contentTypeId: String
  _createdAt: String
  _updatedAt: String
  _enabled: Boolean
  _enabledAt: String
  clientMutationId: String
}

type CreateFavoritesResult {
  clientMutationId: String
  result: Favorites
}

"""create TsStaticSite input"""
input CreateTsStaticSiteInput {
  title: String!
  baseUrl: String
  provider: String!
  idKey: String
  secretKey: String
  destination: String!
  environmentVariables: [TsStaticSiteEnvironmentVariablesInput]
  _id: ID
  _version: Int
  _contentTypeId: String
  _createdAt: String
  _updatedAt: String
  _enabled: Boolean
  _enabledAt: String
  clientMutationId: String
}

type CreateTsStaticSiteResult {
  clientMutationId: String
  result: TsStaticSite
}

"""create Users input"""
input CreateUsersInput {
  favorites: [TSRelationshipInput]
  fullName: String
  _id: ID
  _version: Int
  _contentTypeId: String
  _createdAt: String
  _updatedAt: String
  _enabled: Boolean
  _enabledAt: String
  clientMutationId: String
}

type CreateUsersResult {
  clientMutationId: String
  result: Users
}

"""delete Agents input"""
input DeleteAgentsInput {
  clientMutationId: String
  _id: ID!
}

type DeleteAgentsResult {
  clientMutationId: String
  result: Boolean
}

"""delete Asset input"""
input DeleteAssetInput {
  clientMutationId: String
  _id: ID!
}

type DeleteAssetResult {
  clientMutationId: String
  result: Boolean
}

"""delete CheeseHardnesses input"""
input DeleteCheeseHardnessesInput {
  clientMutationId: String
  _id: ID!
}

type DeleteCheeseHardnessesResult {
  clientMutationId: String
  result: Boolean
}

"""delete Cheese input"""
input DeleteCheeseInput {
  clientMutationId: String
  _id: ID!
}

type DeleteCheeseResult {
  clientMutationId: String
  result: Boolean
}

"""delete Favorites input"""
input DeleteFavoritesInput {
  clientMutationId: String
  _id: ID!
}

type DeleteFavoritesResult {
  clientMutationId: String
  result: Boolean
}

"""delete TsStaticSite input"""
input DeleteTsStaticSiteInput {
  clientMutationId: String
  _id: ID!
}

type DeleteTsStaticSiteResult {
  clientMutationId: String
  result: Boolean
}

"""delete Users input"""
input DeleteUsersInput {
  clientMutationId: String
  _id: ID!
}

type DeleteUsersResult {
  clientMutationId: String
  result: Boolean
}

type Favorites implements TSSearchable {
  rating: String
  location: String
  _id: ID
  _version: Int
  _contentTypeId: String
  _contentTypeName: String
  _createdAt: String
  _updatedAt: String
  _enabled: Boolean
  _enabledAt: String
  _references(filter: JSON, sort: [TSSearchSort], from: Int, size: Int, locale: String, enableLocaleFallback: Boolean = true): UndefinedReferencePaginatedList
  usersSet(filter: JSON, sort: [TSSearchSort], from: Int, size: Int, locale: String, enableLocaleFallback: Boolean = true): UsersPaginatedList
  searchSummary: String
}

type FavoritesPaginatedList {
  results: [Favorites] @deprecated(reason: "Use items instead")
  items: [Favorites]
  total: Int
}

"""A Favorites search result"""
type FavoritesSearchResult {
  searchSummary: String
  _updatedAt: String
  _createdAt: String
  _enabledAt: String
  _enabled: Boolean
  rating: String
  location: String
  _id: String
  _version: Int
  _contentTypeId: String
  _contentTypeName: String
}

"""Favorites search results"""
type FavoritesSearchResults {
  results: [FavoritesSearchResult]
  total: Int
}

type HttpHeader {
  key: String
  value: String
}

input HttpHeaderInput {
  key: String
  value: String
}

type ImportResultType {
  countImported: Int
  ids: [ID]
  rejectedItems: [RejectedImportItem]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutations {
  """Create Project"""
  tsCreateProject(name: String!, template: String, defaultTimezone: String!): TSProjectListItem

  """Create a Lock"""
  tsCreateLock(contentTypeId: ID, id: ID): TSLock

  """Extend a lock Project"""
  tsExtendLock(contentTypeId: ID, id: ID): TSLock

  """Remove a Lock"""
  tsRemoveLock(contentTypeId: ID, id: ID): Boolean

  """Remove a Lock"""
  tsBreakLock(contentTypeId: ID, id: ID): Boolean

  """Create an API Key"""
  tsCreateApiKey(name: String, role: String): TSApiKey

  """Delete an API Key"""
  tsDeleteApiKey(id: ID): Boolean

  """Update webhooks"""
  tsUpdateWebhooks(input: TSWebhooksInput!): TSWebhooks

  """Update Default Locale for Project"""
  tsUpdateDefaultLocale(defaultLocale: String!, version: Int!): JSON

  """Add Locale to Project"""
  tsAddLocale(locale: String!, version: Int!): JSON

  """Remove Locale from Project"""
  tsRemoveLocale(locale: String!, version: Int!): JSON

  """Add a ContentType to the project Schema"""
  tsAddContentType(projectId: ID, version: Int!, contentType: JSON!): JSON

  """Remove a ContentType from the project Schema"""
  tsRemoveContentType(projectId: ID, version: Int!, contentTypeId: ID!): JSON

  """Update a ContentType in the project Schema"""
  tsUpdateContentType(projectId: ID, version: Int!, contentTypeId: ID!, contentType: JSON!): JSON

  """Update Project"""
  tsUpdateProject(id: ID, name: String, avatarId: ID, defaultTimezone: String): TSProject

  """Update Project Billing"""
  tsUpdateProjectBilling(id: ID, token: String, planId: String, coupon: String, email: String): TSBilling

  """Update Project Permissions"""
  tsUpdateProjectPermissions(userId: ID, role: String!): TSPermissions

  """Update Invite Role"""
  tsUpdateInviteRole(email: String!, role: String!): TSInvite

  """Cancel Project Invite"""
  tsCancelProjectInvite(email: String!): TSInvite

  """Remove Project Member"""
  tsRemoveProjectMember(userId: ID): TSPermissions

  """Deactivate project"""
  tsDeleteProject(id: ID!): Boolean

  """Register a setup step as completed"""
  tsCompleteSetupStep(stepKey: String!): Boolean

  """Update a token for a integration provider"""
  tsUpdateIntegrationToken(provider: String!, token: String): TSIntegrationToken

  """Initiate upload process for asset(s)"""
  uploadAssets(projectId: ID, files: [TSFile]!): [Upload]

  """Replace an asset file"""
  replaceAsset(projectId: ID, _id: ID!, _version: Int!, file: TSFile!): Upload

  """Create Asset"""
  createAsset(input: CreateAssetInput!): CreateAssetResult

  """Update Asset"""
  updateAsset(input: UpdateAssetInput!, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateAssetResult

  """Delete Asset"""
  deleteAsset(input: DeleteAssetInput!): DeleteAssetResult

  """
  Create Asset items from Asset csv, only single layer string fields are supported.
  """
  importAssetListFromCSV(assetId: ID!, importColumns: [String]): ImportResultType

  """Create TsStaticSite"""
  createTsStaticSite(input: CreateTsStaticSiteInput!): CreateTsStaticSiteResult

  """Update TsStaticSite"""
  updateTsStaticSite(input: UpdateTsStaticSiteInput!, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateTsStaticSiteResult

  """Delete TsStaticSite"""
  deleteTsStaticSite(input: DeleteTsStaticSiteInput!): DeleteTsStaticSiteResult

  """Create CheeseHardnesses"""
  createCheeseHardnesses(input: CreateCheeseHardnessesInput!): CreateCheeseHardnessesResult

  """Update CheeseHardnesses"""
  updateCheeseHardnesses(input: UpdateCheeseHardnessesInput!, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateCheeseHardnessesResult

  """Delete CheeseHardnesses"""
  deleteCheeseHardnesses(input: DeleteCheeseHardnessesInput!): DeleteCheeseHardnessesResult

  """
  Create CheeseHardnesses items from Asset csv, only single layer string fields are supported.
  """
  importCheeseHardnessesListFromCSV(assetId: ID!, importColumns: [String]): ImportResultType

  """Create Users"""
  createUsers(input: CreateUsersInput!): CreateUsersResult

  """Update Users"""
  updateUsers(input: UpdateUsersInput!, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateUsersResult

  """Delete Users"""
  deleteUsers(input: DeleteUsersInput!): DeleteUsersResult

  """
  Create Users items from Asset csv, only single layer string fields are supported.
  """
  importUsersListFromCSV(assetId: ID!, importColumns: [String]): ImportResultType

  """Create Agents"""
  createAgents(input: CreateAgentsInput!): CreateAgentsResult

  """Update Agents"""
  updateAgents(input: UpdateAgentsInput!, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateAgentsResult

  """Delete Agents"""
  deleteAgents(input: DeleteAgentsInput!): DeleteAgentsResult

  """
  Create Agents items from Asset csv, only single layer string fields are supported.
  """
  importAgentsListFromCSV(assetId: ID!, importColumns: [String]): ImportResultType

  """Create Favorites"""
  createFavorites(input: CreateFavoritesInput!): CreateFavoritesResult

  """Update Favorites"""
  updateFavorites(input: UpdateFavoritesInput!, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateFavoritesResult

  """Delete Favorites"""
  deleteFavorites(input: DeleteFavoritesInput!): DeleteFavoritesResult

  """
  Create Favorites items from Asset csv, only single layer string fields are supported.
  """
  importFavoritesListFromCSV(assetId: ID!, importColumns: [String]): ImportResultType

  """Create Cheese"""
  createCheese(input: CreateCheeseInput!): CreateCheeseResult

  """Update Cheese"""
  updateCheese(input: UpdateCheeseInput!, structure: [ContentStructureInput], locale: String, enableLocaleFallback: Boolean = true): UpdateCheeseResult

  """Delete Cheese"""
  deleteCheese(input: DeleteCheeseInput!): DeleteCheeseResult

  """
  Create Cheese items from Asset csv, only single layer string fields are supported.
  """
  importCheeseListFromCSV(assetId: ID!, importColumns: [String]): ImportResultType
}

"""Object representing a rejected item processed during the import."""
type RejectedImportItem {
  """Index of the rejected item in the import."""
  itemNumber: Int!

  """Beautified error messages interpreted from the raw error objects."""
  errors: [String]

  """Raw error objects from the validator."""
  rawErrors: [JSON]
}

"""Root of the Schema"""
type Root {
  """Activity Log"""
  tsGetActivityLog(filters: JSON): [TSActivityLogItem]

  """Most Recent Static Site Deploys"""
  tsGetLatestSiteDeploys: [TSActivityLogItem]

  """List of Projects"""
  tsGetProjectList: [TSProjectListItem]

  """List of active Project Members and the content they have open"""
  tsGetProjectMembersLocationList: [TSMemberLocation]

  """List of project templates available for import."""
  tsGetProjectTemplateList: [TSProjectTemplate]

  """Get the status of a site deploy"""
  tsSiteDeployStatus(siteId: ID): TSSite

  """Get the status of a site deploy"""
  tsGetContentUsage(id: ID!): [TSContentUsage]

  """Get a Lock by id"""
  tsIsLocked(contentTypeId: ID, id: ID): TSLock

  """Get an API key by key and project"""
  tsGetApiKey(apiKey: String): TSApiKey

  """Get all API Keys for a Project"""
  tsGetApiKeysByProject: [TSApiKey]

  """Get all webhooks"""
  tsGetWebhooks: TSWebhooks

  """Get specific webhook history item by webhookUrl and invocationTime."""
  tsGetWebhookHistoryItem(webhookUrl: String!, invocationTime: String): TSWebhookHistory

  """
  Get webhook history items for a webhookUrl. Filter for a window of invocationTime with the from and to arguments.
  """
  tsGetWebhookHistory(
    webhookUrl: String!

    """Filter start time, inclusive, as an ISO8601 date string."""
    from: String

    """Filter end time, inclusive, as an ISO8601 date string."""
    to: String
  ): [TSWebhookHistory]

  """Get Locales for Project"""
  tsGetLocales: TSLocales

  """Get a Project by id"""
  tsGetProject(id: ID): TSProject

  """List of Project Members"""
  tsGetProjectMembers(id: ID): [TSUser]

  """List of Project Members"""
  tsGetProjectAdmins: [TSUser]

  """List of Project Plans"""
  tsGetPlanList: [TSBillingPlan]

  """List all payments for a project"""
  tsGetPaymentList(cursor: ID): TSBillingPaymentCursorPaginatedList
  search(
    terms: String
    contentTypeNames: [String]
    contentTypeIds: [String]
    locale: String
    enableLocaleFallback: Boolean = true

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): TSSearchResults
  taxonomySuggest(
    terms: String
    contentTypeNames: [String]
    contentTypeIds: [String]
    locale: String
    enableLocaleFallback: Boolean = true

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): TSSuggestionPaginatedList

  """Returns a list asset in natural order."""
  getAssetList(
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): AssetPaginatedList

  """Get a asset by ID"""
  getAsset(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Asset

  """Search the asset index by keyword"""
  searchAssetIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): AssetSearchResults

  """Returns a list tsStaticSite in natural order."""
  getTsStaticSiteList(
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): TsStaticSitePaginatedList

  """Get a tsStaticSite by ID"""
  getTsStaticSite(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): TsStaticSite

  """Search the tsStaticSite index by keyword"""
  searchTsStaticSiteIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): TsStaticSiteSearchResults

  """Returns a list cheeseHardnesses in natural order."""
  getCheeseHardnessesList(
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): CheeseHardnessesPaginatedList

  """Get a cheeseHardnesses by ID"""
  getCheeseHardnesses(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): CheeseHardnesses

  """Search the cheeseHardnesses index by keyword"""
  searchCheeseHardnessesIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): CheeseHardnessesSearchResults

  """Returns a list users in natural order."""
  getUsersList(
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): UsersPaginatedList

  """Get a users by ID"""
  getUsers(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Users

  """Search the users index by keyword"""
  searchUsersIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): UsersSearchResults

  """Returns a list agents in natural order."""
  getAgentsList(
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): AgentsPaginatedList

  """Get a agents by ID"""
  getAgents(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Agents

  """Search the agents index by keyword"""
  searchAgentsIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): AgentsSearchResults

  """Returns a list favorites in natural order."""
  getFavoritesList(
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): FavoritesPaginatedList

  """Get a favorites by ID"""
  getFavorites(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Favorites

  """Search the favorites index by keyword"""
  searchFavoritesIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): FavoritesSearchResults

  """Returns a list cheese in natural order."""
  getCheeseList(
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): CheesePaginatedList

  """Get a cheese by ID"""
  getCheese(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Cheese

  """Search the cheese index by keyword"""
  searchCheeseIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): CheeseSearchResults
  withContext(locale: String, enableLocaleFallback: Boolean): WithContext
}

type TSActivityLogItem {
  activityType: String
  userId: ID
  username: String
  projectId: ID
  siteId: ID
  stage: String
  description: String
  timestamp: String
  metadata: JSON
}

type TSApiKey {
  projectId: ID
  name: String
  role: String
  permissions: JSON
  lastUsed: String
  apiKey: String
  id: ID
}

type TSBilling {
  enterprise: Boolean
  cardDetails: TSBillingCardDetails
  plan: TSBillingPlan
  discount: TSBillingDiscount
  trialEnd: String
  email: String
}

type TSBillingAmount {
  total: Int
  subtotal: Int
  refund: Int
  discount: TSBillingDiscount
}

type TSBillingCardDetails {
  brand: String
  cvcCheck: String
  expMonth: Int
  expYear: Int
  last4: String
}

type TSBillingDiscount {
  percentOff: Int
  amountOff: Int
  duration: String
  code: String
}

type TSBillingEntitlements {
  users: Int
  apiRequests: Int
  apiRateLimit: Int
  contentEntries: Int
  deployTargets: Int
  webhooks: Boolean
  locales: Int
}

type TSBillingPayment {
  date: String
  plan: String
  status: String
  amount: TSBillingAmount
  method: String
}

type TSBillingPaymentCursorPaginatedList {
  items: [TSBillingPayment]
  cursor: ID
  hasMore: Boolean
}

type TSBillingPlan {
  id: String
  name: String
  amount: Int
  created: String
  currency: String
  interval: String
  intervalCount: Int
  entitlements: TSBillingEntitlements
  trialPeriodDays: String
}

type TSContentLocation {
  contentId: String
  contentTypeId: String
  hasLock: Boolean
}

type TSContentUsage {
  siteId: ID
  siteTitle: String
  deployedAt: String
  baseUrl: String
  usages: [TSPathUsage]
}

input TSFile {
  name: String!
  type: String!
}

input TSImagesConfig {
  """Default image parameters. See https://docs.imgix.com/apis/url """
  default: JSON

  """Small image parameters. See https://docs.imgix.com/apis/url """
  small: JSON

  """Medium image parameters. See https://docs.imgix.com/apis/url """
  medium: JSON

  """Large image parameters. See https://docs.imgix.com/apis/url """
  large: JSON
}

type TSIntegrationToken {
  provider: String!
  token: String
}

type TSInvite {
  inviteCode: ID
  email: ID
  role: String
  projectId: ID
  inviterUserId: ID
  status: String
}

type TSLocales {
  defaultLocale: String!
  locales: [String]
  version: Int!
}

type TSLock {
  user: TSUser
  expires: String
}

type TSMemberLocation {
  userId: String!
  contentList: [TSContentLocation]
}

type TSPathUsage {
  path: String
  depth: Int
}

type TSPermissions {
  userId: ID
  projectId: ID
  role: String
}

"""
A Project is you main workspace it stores the content that powers your API
"""
type TSProject {
  id: ID
  name: String
  template: TSProjectTemplate
  invite: String
  users: [TSUser]

  """Takeshape project schema"""
  schema: JSON

  """Takeshape project schema"""
  billing: TSBilling

  """Project status object"""
  status: JSON

  """Project avatar"""
  avatar: BaseAsset

  """Default project timezone"""
  defaultTimezone: String!
  integrationTokens: [TSIntegrationToken]
}

"""
A Project is you main workspace it stores the content that powers your API
"""
type TSProjectListItem {
  id: ID
  name: String
  invite: String

  """Project status object"""
  status: JSON

  """Project avatar"""
  avatar: BaseAsset

  """Default project timezone"""
  defaultTimezone: String!
}

"""A project template available for import."""
type TSProjectTemplate {
  id: String!
  name: String!
  description: String
  avatarPath: String
  glitchProjectName: String
  sourcePath: String!
}

input TSRelationshipInput {
  contentTypeId: String!
  id: String!
}

type TSResourceActions {
  resource: String!
  actions: [String]
}

input TSResourceActionsInput {
  resource: String!
  actions: [String]
}

interface TSSearchable {
  _id: ID
  _contentTypeId: String
  searchSummary: String
}

"""TS search results"""
type TSSearchResults {
  results: [TSSearchable]
  total: Int
}

input TSSearchSort {
  field: String!

  """"asc" for ascending or "desc" for descending"""
  order: String!
}

type TSSite {
  siteId: ID
  status: String
  message: String
}

"""The built-in TakeShape static site model"""
type TsStaticSite implements TSSearchable {
  title: String!
  baseUrl: String
  provider: String!
  idKey: String
  secretKey: String
  destination: String!
  environmentVariables: [TsStaticSiteEnvironmentVariables]
  _id: ID
  _version: Int
  _contentTypeId: String
  _contentTypeName: String
  _createdAt: String
  _updatedAt: String
  _enabled: Boolean
  _enabledAt: String
  searchSummary: String
}

type TsStaticSiteEnvironmentVariables {
  name: String
  value: String
}

input TsStaticSiteEnvironmentVariablesInput {
  name: String
  value: String
}

type TsStaticSitePaginatedList {
  results: [TsStaticSite] @deprecated(reason: "Use items instead")
  items: [TsStaticSite]
  total: Int
}

"""A TsStaticSite search result"""
type TsStaticSiteSearchResult {
  searchSummary: String
  _updatedAt: String
  _createdAt: String
  _enabledAt: String
  _enabled: Boolean
  title: String
  baseUrl: String
  provider: String
  idKey: String
  destination: String
  _id: String
  _version: Int
  _contentTypeId: String
  _contentTypeName: String
}

"""TsStaticSite search results"""
type TsStaticSiteSearchResults {
  results: [TsStaticSiteSearchResult]
  total: Int
}

type TSSuggestion {
  _id: ID
  _contentTypeId: ID
  _contentTypeName: String
  text: String
  summary: String
}

type TSSuggestionPaginatedList {
  results: [TSSuggestion] @deprecated(reason: "Use items instead")
  items: [TSSuggestion]
  total: Int
}

type TSUser {
  id: ID
  email: String
  fullName: String
  role: String
  avatarPath: String
}

type TSWebhook {
  webhookUrl: String!
  headers: [HttpHeader]
  resourceActions: [TSResourceActions]
}

type TSWebhookHistory {
  _invocationTime: String!
  projectId: ID!
  webhookUrl: String!
  stats: TSWebhookHistoryStats!
}

type TSWebhookHistoryError {
  name: String
  message: String
}

type TSWebhookHistoryRequest {
  url: String!
  headers: JSON
  body: JSON
}

type TSWebhookHistoryResponse {
  status: String!
  statusText: String
  url: String!
  headers: JSON
  body: JSON
}

type TSWebhookHistoryStats {
  succeeded: Boolean!
  retrying: Boolean!
  invocationStartTime: String!
  invocationDuration: Int!
  request: TSWebhookHistoryRequest!
  response: TSWebhookHistoryResponse
  error: TSWebhookHistoryError
}

input TSWebhookInput {
  webhookUrl: String!
  headers: [HttpHeaderInput]
  resourceActions: [TSResourceActionsInput]
}

type TSWebhooks {
  secret: String
  webhooks: [TSWebhook]
}

input TSWebhooksInput {
  resetSecret: Boolean
  webhooks: [TSWebhookInput]
}

union UndefinedReference = Agents | Cheese

type UndefinedReferencePaginatedList {
  results: [UndefinedReference] @deprecated(reason: "Use items instead")
  items: [UndefinedReference]
  total: Int
}

"""update Agents input"""
input UpdateAgentsInput {
  descriptionSummary: String
  address: AgentsAddressInput
  operators: String

  """Enter the website URL."""
  websiteUrl: String
  phone: String
  name: String
  logo: TSRelationshipInput

  """Enter the type of vendor."""
  type: [String]
  yearFounded: Int

  """Enter any social media links available for this agent."""
  socialMedia: AgentsSocialMediaInput
  email: String
  _id: ID!
  _version: Int
  _contentTypeId: String
  _createdAt: String
  _updatedAt: String
  _enabled: Boolean
  _enabledAt: String
  clientMutationId: String
}

type UpdateAgentsResult {
  clientMutationId: String
  result: Agents
}

"""update Asset input"""
input UpdateAssetInput {
  title: String
  description: String
  filename: String
  caption: JSON
  credit: JSON
  path: String
  s3Key: String
  mimeType: String
  sourceUrl: String
  uploadStatus: String
  _id: ID!
  _version: Int
  _contentTypeId: String
  _createdAt: String
  _updatedAt: String
  _enabled: Boolean
  _enabledAt: String
  clientMutationId: String
}

type UpdateAssetResult {
  clientMutationId: String
  result: Asset
}

"""update CheeseHardnesses input"""
input UpdateCheeseHardnessesInput {
  name: String
  _id: ID!
  _version: Int
  _contentTypeId: String
  _createdAt: String
  _updatedAt: String
  _enabled: Boolean
  _enabledAt: String
  clientMutationId: String
}

type UpdateCheeseHardnessesResult {
  clientMutationId: String
  result: CheeseHardnesses
}

"""update Cheese input"""
input UpdateCheeseInput {
  characteristics: CheeseCharacteristicsInput
  tastesLike: [TSRelationshipInput]
  name: String
  description: String
  labelOrPhoto: TSRelationshipInput
  source: String
  photos: [CheesePhotosInput]

  """Enter a short pairing recommendation."""
  pairings: String
  agents: [TSRelationshipInput]
  _id: ID!
  _version: Int
  _contentTypeId: String
  _createdAt: String
  _updatedAt: String
  _enabled: Boolean
  _enabledAt: String
  clientMutationId: String
}

type UpdateCheeseResult {
  clientMutationId: String
  result: Cheese
}

"""update Favorites input"""
input UpdateFavoritesInput {
  rating: String
  location: String
  _id: ID!
  _version: Int
  _contentTypeId: String
  _createdAt: String
  _updatedAt: String
  _enabled: Boolean
  _enabledAt: String
  clientMutationId: String
}

type UpdateFavoritesResult {
  clientMutationId: String
  result: Favorites
}

"""update TsStaticSite input"""
input UpdateTsStaticSiteInput {
  title: String
  baseUrl: String
  provider: String
  idKey: String
  secretKey: String
  destination: String
  environmentVariables: [TsStaticSiteEnvironmentVariablesInput]
  _id: ID!
  _version: Int
  _contentTypeId: String
  _createdAt: String
  _updatedAt: String
  _enabled: Boolean
  _enabledAt: String
  clientMutationId: String
}

type UpdateTsStaticSiteResult {
  clientMutationId: String
  result: TsStaticSite
}

"""update Users input"""
input UpdateUsersInput {
  favorites: [TSRelationshipInput]
  fullName: String
  _id: ID!
  _version: Int
  _contentTypeId: String
  _createdAt: String
  _updatedAt: String
  _enabled: Boolean
  _enabledAt: String
  clientMutationId: String
}

type UpdateUsersResult {
  clientMutationId: String
  result: Users
}

"""A project file stored on s3"""
type Upload {
  uploadUrl: ID
  asset: Asset
}

type Users implements TSSearchable {
  favorites(locale: String, enableLocaleFallback: Boolean = true): [Favorites]
  fullName: String
  _id: ID
  _version: Int
  _contentTypeId: String
  _contentTypeName: String
  _createdAt: String
  _updatedAt: String
  _enabled: Boolean
  _enabledAt: String
  searchSummary: String
}

type UsersPaginatedList {
  results: [Users] @deprecated(reason: "Use items instead")
  items: [Users]
  total: Int
}

"""A Users search result"""
type UsersSearchResult {
  searchSummary: String
  _updatedAt: String
  _createdAt: String
  _enabledAt: String
  _enabled: Boolean
  fullName: String
  _id: String
  _version: Int
  _contentTypeId: String
  _contentTypeName: String
}

"""Users search results"""
type UsersSearchResults {
  results: [UsersSearchResult]
  total: Int
}

"""This query allow you to pass context to your queries"""
type WithContext {
  search(
    terms: String
    contentTypeNames: [String]
    contentTypeIds: [String]
    locale: String
    enableLocaleFallback: Boolean = true

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): TSSearchResults
  taxonomySuggest(
    terms: String
    contentTypeNames: [String]
    contentTypeIds: [String]
    locale: String
    enableLocaleFallback: Boolean = true

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): TSSuggestionPaginatedList

  """Returns a list asset in natural order."""
  getAssetList(
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): AssetPaginatedList

  """Get a asset by ID"""
  getAsset(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Asset

  """Search the asset index by keyword"""
  searchAssetIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): AssetSearchResults

  """Returns a list tsStaticSite in natural order."""
  getTsStaticSiteList(
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): TsStaticSitePaginatedList

  """Get a tsStaticSite by ID"""
  getTsStaticSite(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): TsStaticSite

  """Search the tsStaticSite index by keyword"""
  searchTsStaticSiteIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): TsStaticSiteSearchResults

  """Returns a list cheeseHardnesses in natural order."""
  getCheeseHardnessesList(
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): CheeseHardnessesPaginatedList

  """Get a cheeseHardnesses by ID"""
  getCheeseHardnesses(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): CheeseHardnesses

  """Search the cheeseHardnesses index by keyword"""
  searchCheeseHardnessesIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): CheeseHardnessesSearchResults

  """Returns a list users in natural order."""
  getUsersList(
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): UsersPaginatedList

  """Get a users by ID"""
  getUsers(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Users

  """Search the users index by keyword"""
  searchUsersIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): UsersSearchResults

  """Returns a list agents in natural order."""
  getAgentsList(
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): AgentsPaginatedList

  """Get a agents by ID"""
  getAgents(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Agents

  """Search the agents index by keyword"""
  searchAgentsIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): AgentsSearchResults

  """Returns a list favorites in natural order."""
  getFavoritesList(
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): FavoritesPaginatedList

  """Get a favorites by ID"""
  getFavorites(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Favorites

  """Search the favorites index by keyword"""
  searchFavoritesIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): FavoritesSearchResults

  """Returns a list cheese in natural order."""
  getCheeseList(
    locale: String
    enableLocaleFallback: Boolean = true

    """Filter out content that is not enabled. Defaults to true."""
    onlyEnabled: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): CheesePaginatedList

  """Get a cheese by ID"""
  getCheese(_id: ID!, locale: String, enableLocaleFallback: Boolean = true): Cheese

  """Search the cheese index by keyword"""
  searchCheeseIndex(
    locale: String
    enableLocaleFallback: Boolean = true
    terms: String

    """The offset from the first result you want to fetch."""
    from: Int

    """The maximum number of items to return."""
    size: Int

    """An elasticsearch style filter. Overrides onlyEnabled."""
    filter: JSON

    """An list of fields to sort by."""
    sort: [TSSearchSort]
  ): CheeseSearchResults
}
